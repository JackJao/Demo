server.port = 8088
#springboot   mybatis(mybatis\u5B98\u65B9\u63D0\u4F9B\u7684Spring Boot\u6574\u5408)
#loading mybatis configuration file
mybatis.mapper-locations = classpath:mapper/*Mapper.xml
mybatis.config-location = classpath:config/mybatis-config.xml
mybatis.type-aliases-package = com.jaon.demo.domain

#dataSource configuration 未使用数据库连接池的配置
#Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. 
#The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.
#spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver
#spring.datasource.url = jdbc:mysql://localhost:3306/testdb?allowMultiQueries=true&autoReconnect=true&failOverReadOnly=false&useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai
#spring.datasource.username = root
#spring.datasource.password = 123456

#dataSource configuration 使用数据库连接池的配置
#=======druid config start==============================================================================================
spring.datasource.type = com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver
spring.datasource.platform = mysql
spring.datasource.url = jdbc:mysql://localhost:3306/testdb?allowMultiQueries=true&autoReconnect=true&failOverReadOnly=false&useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai
spring.datasource.username = root
spring.datasource.password = 123456
# druid 下面为连接池的补充设置，应用到上面所有数据源中
# druid 初始化连接数大小，最小，最大
spring.datasource.druid.initial-size = 8
spring.datasource.druid.min-idle = 8
spring.datasource.druid.max-active = 30
# druid 配置获取连接等待超时的时间
spring.datasource.druid.max-wait = 60000
# druid 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.time-between-eviction-runs-millis = 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis = 300000
#数据库不同validationQuery的值就不同,mysql支持select '1' from dual|select '1'，oracle支持select '1' from dual
#'1'可以是1也可以是其他数据或字符
spring.datasource.druid.validation-query = select '1' from dual
spring.datasource.druid.test-while-idle = true
spring.datasource.druid.test-on-borrow = false
spring.datasource.druid.test-on-return = false
#是否缓存preparedStatement，也就是PSCache。
# druid 打开PSCache，并且指定每个连接上PSCache的大小
#PSCache对支持游标的数据库性能提升巨大，比如说oracle。?
#在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。
#作者在5.5版本中使用PSCache，通过监控界面发现PSCache有缓存命中率记录，?
#该应该是支持PSCache。
spring.datasource.druid.pool-prepared-statements = true
spring.datasource.druid.max-open-prepared-statements = 20
#要启用PSCache，必须配置大于0，当大于0时，
#poolPreparedStatements自动触发修改为true。
#在Druid中，不会存在Oracle下PSCache占用内存过多的问题，
#可以把这个数值配置大一些，比如说100
spring.datasource.druid.max-pool-prepared-statement-per-connection-size = 20
# druid 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.filters = stat,wall,slf4j
# druid 状态监控
spring.datasource.druid.filter.stat.enabled = true
spring.datasource.druid.filter.stat.db-type = mysql
spring.datasource.druid.filter.stat.log-slow-sql = true
spring.datasource.druid.filter.stat.slow-sql-millis = 2000
# druid 监控过滤器
spring.datasource.druid.web-stat-filter.enabled = true
spring.datasource.druid.web-stat-filter.exclusions = "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
# druid 监控页面
spring.datasource.druid.stat-view-servlet.enabled = true
#自定义监控页面访问路径
spring.datasource.druid.stat-view-servlet.url-pattern = /druid/*
#是否开启重置按钮
spring.datasource.druid.stat-view-servlet.reset-enable = false
#登录账号
spring.datasource.druid.stat-view-servlet.login-username = admin
#登录密码
spring.datasource.druid.stat-view-servlet.login-password = admin
#设置黑名单
spring.datasource.druid.stat-view-servlet.deny =
#设置白名单
spring.datasource.druid.stat-view-servlet.allow = 127.0.0.1
#忽略druid管理的url访问，权限释放,让security的csrf校验忽略druid请求。
#http.csrf().ignoringAntMatchers("/druid/*");
#=======druid config end================================================================================================
#添加javamelody支持
javamelody.init-parameters.log=true
javamelody.init-parameters.authorized-users=admin:123456

